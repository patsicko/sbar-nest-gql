# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Hospital {
  """Hospital Id"""
  hospitalId: Int!
  hospitalName: String!
  district: String
  sector: String
  departments: [Department!]
  staff: [User!]
}

type Sbar {
  id: Int!
  situation: String!
  background: String!
  assessment: String!
  recommendation: String!
  patient: Patient!
  createdBy: User!
  updatedBy: User
  createdAt: String!
}

type Patient {
  id: Int!
  firstName: String!
  lastName: String!
  unity: Unity!
  department: Department!
  sbars: [Sbar!]
  isActive: Boolean!
}

type Department {
  id: Int!
  name: String!
  hospital: Hospital!
  patients: [Patient!]
  unities: [Unity!]
  staff: [User!]
}

type Unity {
  id: Int!
  name: String!
  department: Department!
  staff: User
  patients: [Patient!]
  handovers: [Handover!]
}

type Handover {
  id: Int!
  unity: Unity!
  fromStaff: User!
  toStaff: User!
  sbarsGiven: [Sbar!]
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  approved: Boolean!
  hospital: Hospital
  department: Department
  unity: Unity
  handoversGiven: [Handover!]
  handoversReceived: [Handover!]
  sbarsCreated: [Sbar!]
  sbarsUpdated: [Sbar!]
}

type LoginResponse {
  accessToken: String!
}

type Profile {
  id: Int!
  bio: String!
  user: User!
}

type Query {
  allUsers: [User!]
  GetuserById(id: Int!): User
  AllHospitals: [Hospital!]!
  hospital(id: Int!): Hospital!
  profile(id: Int!): Profile!
  getDepartments: [Department!]!
  getSingleDepartment(id: Int!): Department!
  getUnities(departmentId: Int!): [Unity!]!
  getUnity(id: Int!): Unity!
  getPatients: [Patient!]!
  findPatientsByUnity(unityId: Int!): [Patient!]!
  getPatient(id: Int!): Patient!
  getSbars: [Sbar!]!
  findSbarsByPatient(patientId: Int!): [Sbar!]!
  getSbar(id: Int!): Sbar!
  getHandovers: [Handover!]!
  getHandover(id: Int!): Handover!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  approveUser(id: Int!): User!
  createStaff(createStaffInput: CreateStaffInput!): User!
  updateUser(updateUserInput: UpdateUserInput!, id: Int!): User!
  makeAdmin(id: Int!): User!
  removeUser(id: Int!): User
  assignDepartment(assignDepartmentInput: AssignDepartmentInput!): User!
  login(loginInput: LoginInput!): LoginResponse!
  createHospital(createHospitalInput: CreateHospitalWithAdminInput!): Hospital!
  updateHospital(updateHospitalInput: UpdateHospitalInput!): Hospital!
  removeHospital(id: Int!): Hospital!
  createProfile(createProfileInput: CreateProfileInput!): Profile!
  updateProfile(updateProfileInput: UpdateProfileInput!): Profile!
  removeProfile(id: Int!): Profile!
  createDepartment(createDepartmentInput: CreateDepartmentInput!): Department!
  updateDepartment(updateDepartmentInput: UpdateDepartmentInput!): Department!
  removeDepartment(id: Int!): Department!
  createUnity(createUnityInput: CreateUnityInput!): Unity!
  updateUnity(updateUnityInput: UpdateUnityInput!): Unity!
  removeUnity(id: Int!): Unity!
  transferPatient(transferPatientInput: TransferPatientInput!): Patient!
  createPatient(createPatientInput: CreatePatientInput!): Patient!
  updatePatient(updatePatientInput: UpdatePatientInput!): Patient!
  archivePatient(patientId: Int!): Patient!
  removePatient(id: Int!): Patient!
  createSbar(createSbarInput: CreateSbarInput!): Sbar!
  updateSbar(updateSbarInput: UpdateSbarInput!): Sbar!
  removeSbar(id: Int!): Sbar!
  createHandover(createHandoverInput: CreateHandoverInput!): Handover!
  updateHandover(updateHandoverInput: UpdateHandoverInput!): Handover!
  removeHandover(id: Int!): Handover!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input CreateStaffInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: String!
  hospitalId: Float!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  id: Int!
}

input AssignDepartmentInput {
  userId: Int!
  departmentId: Int!
  unityId: Int!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateHospitalWithAdminInput {
  hospitalName: String!
  district: String!
  sector: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UpdateHospitalInput {
  hospitalName: String
  district: String
  sector: String
  firstName: String
  lastName: String
  email: String
  password: String
  id: Int!
}

input CreateProfileInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateProfileInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateDepartmentInput {
  name: String!
}

input UpdateDepartmentInput {
  name: String
  id: Int!
}

input CreateUnityInput {
  name: String!
  departmentId: Int!
}

input UpdateUnityInput {
  name: String
  departmentId: Int
  id: Int!
}

input TransferPatientInput {
  patientId: Int!
  currentUnityId: Int!
  targetUnityId: Int!
}

input CreatePatientInput {
  firstName: String!
  lastName: String!
  departmentId: Int!
  unityId: Int!
}

input UpdatePatientInput {
  firstName: String
  lastName: String
  departmentId: Int
  unityId: Int
  id: Int!
}

input CreateSbarInput {
  situation: String!
  background: String!
  assessment: String!
  recommendation: String!
  patientId: Int!
}

input UpdateSbarInput {
  situation: String
  background: String
  assessment: String
  recommendation: String
  patientId: Int
  id: Int!
  updatedById: Int
}

input CreateHandoverInput {
  unityId: Int!
  fromStaffId: Int!
  toStaffId: Int!
  sbarIds: [Int!]
  handoverDetails: String!
  receiptSignature: Boolean
}

input UpdateHandoverInput {
  unityId: Int
  fromStaffId: Int
  toStaffId: Int
  sbarIds: [Int!]
  handoverDetails: String
  receiptSignature: Boolean
  id: Int!
}